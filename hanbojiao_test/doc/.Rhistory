packages.used=c("gbm", "tidyverse")
# check packages that need to be installed.
packages.needed=setdiff(packages.used,
intersect(installed.packages()[,1],
packages.used))
# install additional packages
if(length(packages.needed)>0){
install.packages(packages.needed, dependencies = TRUE)
}
library(gbm)
library(tidyverse)
load("../output/fiducial_pt_list.RData")
dim(fiducial_pt_list)
View(fiducial_pt_list)
nrow(fiducial_pt_list)
length(fiducial_pt_list)
n<-length(fiducial_pt_list)
n_train <- round(n/10*(4/5), 0)
n_train
n<-length(fiducial_pt_list)
#测试 partial part
n<-n*0.2
n
sample(1:length(fiducial_pt_list),n,replace=F)
index<-sample(1:length(fiducial_pt_list),n,replace=F)
n_train <- round(n*(4/5), 0)
train_idx <- sample(index, n_train, replace = F)
test_idx <- setdiff(index,train_idx)
train_idx
test_idx
#############这里feature函数直接可以求出78个点与其他77个点的距离。###########
source("../lib/feature.R")
############dat_train直接得出train_idx这些图片中，所有两点间距离（78*77=6006个）###########
tm_feature_train <- NA
if(run.feature.train){
tm_feature_train <- system.time(dat_train <- feature(fiducial_pt_list, train_idx))
}
#############这里feature函数直接可以求出78个点与其他77个点的距离。###########
source("../lib/feature.R")
############设置一些参数，例如是否cross-validation, K-fold的参数，是否做各种train/test测试 ###########
run.cv=TRUE # run cross-validation on the training set
K <- 5  # number of CV folds
run.feature.train=TRUE # process features for training set
run.test=TRUE # run evaluation on an independent test set
run.feature.test=TRUE # process features for test set
#############这里feature函数直接可以求出78个点与其他77个点的距离。###########
source("../lib/feature.R")
############dat_train直接得出train_idx这些图片中，所有两点间距离（78*77=6006个）###########
tm_feature_train <- NA
if(run.feature.train){
tm_feature_train <- system.time(dat_train <- feature(fiducial_pt_list, train_idx))
}
############为了之后的load/readxxx，提前设置file path###########
train_dir <- "../data/train_set/" # This will be modified for different data sets.
train_image_dir <- paste(train_dir, "images/", sep="")
train_pt_dir <- paste(train_dir,  "points/", sep="")
train_label_path <- paste(train_dir, "label.csv", sep="")
info <- read.csv(train_label_path)
train_dir <- "../hanbojiao_test/data/train_set/" # This will be modified for different data sets.
train_image_dir <- paste(train_dir, "images/", sep="")
train_pt_dir <- paste(train_dir,  "points/", sep="")
train_label_path <- paste(train_dir, "label.csv", sep="")
info <- read.csv(train_label_path)
train_dir <- "../data/train_set/" # This will be modified for different data sets.
train_image_dir <- paste(train_dir, "images/", sep="")
train_pt_dir <- paste(train_dir,  "points/", sep="")
train_label_path <- paste(train_dir, "label.csv", sep="")
info <- read.csv(train_label_path)
train_label_path
info <- read.csv(train_label_path)
info
#############这里feature函数直接可以求出78个点与其他77个点的距离。###########
source("../lib/feature.R")
############dat_train直接得出train_idx这些图片中，所有两点间距离（78*77=6006个）###########
tm_feature_train <- NA
if(run.feature.train){
tm_feature_train <- system.time(dat_train <- feature(fiducial_pt_list, train_idx))
}
############data_test同理###########
tm_feature_test <- NA
if(run.feature.test){
tm_feature_test <- system.time(dat_test <- feature(fiducial_pt_list, test_idx))
}
# save(dat_train, file="../output/feature_train.RData")
# save(dat_test, file="../output/feature_test.RData")
tm_feature_test
tm_feature_train
dat_train
View(dat_train)
dat_train%>%names%>%last
data=dat_train
n.tree=1000
shrinkage=0.001
inter.dep =1
cv.folds=3
# fit initial model
gbm1 <-
gbm(emotion_idx~.,         # formula
data=data,                   # dataset
# var.monotone=c(0,0,0,0,0,0), # -1: monotone decrease,
#                              # +1: monotone increase,
#                              #  0: no monotone restrictions
distribution="adaboost",     # see the help for other choices
n.trees=n.tree,              # number of trees
shrinkage=shrinkage,         # shrinkage or learning rate,
# 0.001 to 0.1 usually work
interaction.depth=inter.dep, # 1: additive model, 2: two-way interactions, etc.
bag.fraction = 0.5,          # subsampling fraction, 0.5 is probably best
train.fraction = 0.5,        # fraction of data for training,
# first train.fraction*N used for training
n.minobsinnode = 10,         # minimum total weight needed in each node
cv.folds = cv.folds,         # do 3-fold cross-validation
keep.data=TRUE,              # keep a copy of the dataset with the object
verbose=FALSE,               # don't print out progress
n.cores=1)                   # use only a single core (detecting #cores is
gbm1 <-
gbm(emotion_idx~.,         # formula
data=data,                   # dataset
# var.monotone=c(0,0,0,0,0,0), # -1: monotone decrease,
#                              # +1: monotone increase,
#                              #  0: no monotone restrictions
distribution="adaboost",     # see the help for other choices
n.trees=n.tree,              # number of trees
shrinkage=shrinkage,         # shrinkage or learning rate,
# 0.001 to 0.1 usually work
interaction.depth=inter.dep, # 1: additive model, 2: two-way interactions, etc.
bag.fraction = 0.5,          # subsampling fraction, 0.5 is probably best
train.fraction = 0.5,        # fraction of data for training,
# first train.fraction*N used for training
n.minobsinnode = 10,         # minimum total weight needed in each node
cv.folds = cv.folds,         # do 3-fold cross-validation
keep.data=TRUE,              # keep a copy of the dataset with the object
verbose=FALSE,               # don't print out progress
n.cores=1)                   # use only a single core (detecting #cores is
View(dat_test)
dat_train$emotion_idx%>%unique
factor(1:7)->x
x
levels(x)
levels(x)[3]<-123
x
level(dat_train$emotion_idx)
levels(dat_train$emotion_idx)
levels(dat_train$emotion_idx)[-1]<-0
levels(dat_train$emotion_idx)
levels(dat_train$emotion_idx)
dat_train$emotion_idx
library(caret)
library(gbm)
library(tidyverse)
load("../output/fiducial_pt_list.RData")
############为了之后的load/readxxx，提前设置file path###########
train_dir <- "../data/train_set/" # This will be modified for different data sets.
train_image_dir <- paste(train_dir, "images/", sep="")
train_pt_dir <- paste(train_dir,  "points/", sep="")
train_label_path <- paste(train_dir, "label.csv", sep="")
info <- read.csv(train_label_path)
############设置一些参数，例如是否cross-validation, K-fold的参数，是否做各种train/test测试 ###########
run.cv=TRUE # run cross-validation on the training set
K <- 5  # number of CV folds
run.feature.train=TRUE # process features for training set
run.test=TRUE # run evaluation on an independent test set
run.feature.test=TRUE # process features for test set
n<-length(fiducial_pt_list)
# #测试 partial part
# n<-n*0.3
# index<-sample(1:length(fiducial_pt_list),n,replace=F)
# n_train <- round(n*(4/5), 0)
# train_idx <- sample(index, n_train, replace = F)
# test_idx <- setdiff(index,train_idx)
n_train <- round(n*(4/5), 0)
train_idx <- sample(1:n, n_train, replace = F)
test_idx <- setdiff(1:n,train_idx)
#############这里feature函数直接可以求出78个点与其他77个点的距离。###########
source("../lib/feature.R")
############dat_train直接得出train_idx这些图片中，所有两点间距离（78*77=6006个）###########
tm_feature_train <- NA
if(run.feature.train){
tm_feature_train <- system.time(dat_train <- feature(fiducial_pt_list, train_idx))
}
############data_test同理###########
tm_feature_test <- NA
if(run.feature.test){
tm_feature_test <- system.time(dat_test <- feature(fiducial_pt_list, test_idx))
}
# save(dat_train, file="../output/feature_train.RData")
# save(dat_test, file="../output/feature_test.RData")
data=dat_train#[sample(1:2000,500,replace = F),]
n.tree=200
shrinkage=0.1
inter.dep =1
cv.folds=3
# distribution="adaboost"    #some problem
distribution = "multinomial"
n1<-Sys.time()
# fit initial model
gbm1 <-
gbm(emotion_idx ~.,            # formula
data=data,                   # dataset
# var.monotone=c(0,0,0,0,0,0), # -1: monotone decrease,
#                              # +1: monotone increase,
#                              #  0: no monotone restrictions
distribution = "multinomial",   # see the help for other choices
n.trees=n.tree,              # number of trees
shrinkage=shrinkage,         # shrinkage or learning rate,
# 0.001 to 0.1 usually work
interaction.depth=inter.dep, # 1: additive model, 2: two-way interactions, etc.
bag.fraction = 0.5,          # subsampling fraction, 0.5 is probably best
train.fraction = 0.5,        # fraction of data for training,
# first train.fraction*N used for training
n.minobsinnode = 10,         # minimum total weight needed in each node
cv.folds = cv.folds,                # do 3-fold cross-validation
keep.data=TRUE,              # keep a copy of the dataset with the object
verbose=FALSE,               # don't print out progress
n.cores=1)                   # use only a single core (detecting #cores is
# error-prone, so avoided here)
n2<-Sys.time()-n1
n2
acc
best.iter <- gbm.perf(gbm1,method="OOB")
print(best.iter)
#
# # check performance using a 50% heldout test set
best.iter <- gbm.perf(gbm1,method="test")
print(best.iter)
#
# # check performance using 5-fold cross-validation
best.iter <- gbm.perf(gbm1,method="cv")
print(best.iter)
pred = predict.gbm(object = gbm1,
newdata = dat_test,
n.trees = best.iter,
type = "response")
labels = colnames(pred)[apply(pred, 1, which.max)]
# least squares error
result = data.frame(dat_test$emotion_idx, labels)
acc<-mean(dat_test$emotion_idx==labels)
acc
best.iter_test <- gbm.perf(gbm1,method="test")
print(best.iter_test)
# # check performance using 5-fold cross-validation
best.iter_cv <- gbm.perf(gbm1,method="cv")
print(best.iter_cv)
n2
data=dat_train#[sample(1:2000,500,replace = F),]
n.tree=200
shrinkage=0.05
inter.dep =1
cv.folds=3
# distribution="adaboost"    #some problem
distribution = "multinomial"
n1<-Sys.time()
# fit initial model
gbm1 <-
gbm(emotion_idx ~.,            # formula
data=data,                   # dataset
# var.monotone=c(0,0,0,0,0,0), # -1: monotone decrease,
#                              # +1: monotone increase,
#                              #  0: no monotone restrictions
distribution = "multinomial",   # see the help for other choices
n.trees=n.tree,              # number of trees
shrinkage=shrinkage,         # shrinkage or learning rate,
# 0.001 to 0.1 usually work
interaction.depth=inter.dep, # 1: additive model, 2: two-way interactions, etc.
bag.fraction = 0.5,          # subsampling fraction, 0.5 is probably best
train.fraction = 0.5,        # fraction of data for training,
# first train.fraction*N used for training
n.minobsinnode = 10,         # minimum total weight needed in each node
cv.folds = cv.folds,                # do 3-fold cross-validation
keep.data=TRUE,              # keep a copy of the dataset with the object
verbose=FALSE,               # don't print out progress
n.cores=1)                   # use only a single core (detecting #cores is
